// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PrescriptionProjectAssignment.Context;

namespace PrescriptionProjectAssignment.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220301115334_DataModel_2")]
    partial class DataModel_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CityInfoId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityInfoId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.CityInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CityInfos");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.JournalLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PatientJournalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientJournalId");

                    b.ToTable("JournalLogs");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Instructions")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("PatientJournalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientJournalId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.PatientJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("PatientJournals");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Pharmaceut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Pharmaceuts");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int?>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("PatientJournalId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PatientJournalId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Address", b =>
                {
                    b.HasOne("PrescriptionProjectAssignment.Models.CityInfo", "CityInfo")
                        .WithMany("Addresses")
                        .HasForeignKey("CityInfoId");

                    b.Navigation("CityInfo");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.JournalLog", b =>
                {
                    b.HasOne("PrescriptionProjectAssignment.Models.PatientJournal", "PatientJournal")
                        .WithMany("JournaLogs")
                        .HasForeignKey("PatientJournalId");

                    b.Navigation("PatientJournal");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Patient", b =>
                {
                    b.HasOne("PrescriptionProjectAssignment.Models.PatientJournal", "PatientJournal")
                        .WithOne("Patient")
                        .HasForeignKey("PrescriptionProjectAssignment.Models.Patient", "PatientJournalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientJournal");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Pharmaceut", b =>
                {
                    b.HasOne("PrescriptionProjectAssignment.Models.Pharmacy", "Pharmacy")
                        .WithMany("Pharmaceuts")
                        .HasForeignKey("PharmacyId");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Pharmacy", b =>
                {
                    b.HasOne("PrescriptionProjectAssignment.Models.Address", "Address")
                        .WithOne("Pharmacy")
                        .HasForeignKey("PrescriptionProjectAssignment.Models.Pharmacy", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Prescription", b =>
                {
                    b.HasOne("PrescriptionProjectAssignment.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("DoctorId");

                    b.HasOne("PrescriptionProjectAssignment.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId");

                    b.HasOne("PrescriptionProjectAssignment.Models.PatientJournal", "PatientJournal")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientJournalId");

                    b.Navigation("Doctor");

                    b.Navigation("Medicine");

                    b.Navigation("PatientJournal");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Address", b =>
                {
                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.CityInfo", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Doctor", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.PatientJournal", b =>
                {
                    b.Navigation("JournaLogs");

                    b.Navigation("Patient");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("PrescriptionProjectAssignment.Models.Pharmacy", b =>
                {
                    b.Navigation("Pharmaceuts");
                });
#pragma warning restore 612, 618
        }
    }
}
